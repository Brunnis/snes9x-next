/*
   Author: Themaister
   License: Public domain
*/

struct input
{
   float2 video_size;
   float2 texture_size;
   float2 output_size;
   float frame_count;
};

struct prev_in
{
   float2 tex_coord;
   sampler2D texture;
};

struct vertex_out
{
   float water;
};

void main_vertex
(
   float4 position : POSITION,
   out float4 oPosition : POSITION,
   uniform float4x4 modelViewProj,

   float4 color : COLOR,
   out float4 oColor : COLOR,

   float2 tex : TEXCOORD0,
   out float2 oTex : TEXCOORD0,
   float2 tex1 : TEXCOORD1,
   out float2 oTex1 : TEXCOORD1,

   out vertex_out VERT,

   uniform float mario_water,
   uniform float mario_water_time,

   uniform input IN
)
{
   oPosition = mul(modelViewProj, position);
   oColor = color;
   oTex = tex;
   oTex1 = tex1;
   float transition_time = (IN.frame_count - mario_water_time) / 120.0;

   float water_coeff;

   if (mario_water > 0.0)
      water_coeff = 1.0;
   else
      water_coeff = exp(-transition_time);

   VERT = vertex_out(water_coeff);
}

const float2 src0 = float2(0.6, 0.7);
const float2 src1 = float2(0.9, 0.9);
const float2 src2 = float2(-0.6, 0.3);
const float2 src3 = float2(0.1, 0.4);
const float2 src4 = float2(0.1, 0.4);
const float2 src5 = float2(0.5, 0.5);
const float2 src6 = float2(-1.0, 1.0);

float apply_wave(float2 pos, float2 src, float cnt)
{
   float2 diff = pos - src;
   float dist = 300.0 * sqrt(dot(diff, diff));
   dist -= 0.15 * cnt;
   return sin(dist);
}

float4 water_texture(float4 output, float2 scale, float cnt)
{
   float res = apply_wave(scale, src0, cnt);
   res +=      apply_wave(scale, src1, cnt);
   res +=      apply_wave(scale, src2, cnt);
   res +=      apply_wave(scale, src3, cnt);
   res +=      apply_wave(scale, src4, cnt);
   res +=      apply_wave(scale, src5, cnt);
   res +=      apply_wave(scale, src6, cnt);

   return output * (0.95 + 0.012 * res);
}

float4 main_fragment 
(
   uniform input IN, 
   float2 tex : TEXCOORD0, uniform sampler2D s0 : TEXUNIT0,
   uniform sampler2D rain, float2 tex1 : TEXCOORD1,
   in vertex_out VERT
) : COLOR
{
   float4 water_tex = water_texture(tex2D(s0, tex), 
      tex * IN.texture_size / IN.video_size, IN.frame_count);

   float4 normal_tex = tex2D(s0, tex);
   float4 rain_tex = tex2D(rain, tex1);

   return lerp(lerp(normal_tex, water_tex, VERT.water), rain_tex, rain_tex.a * VERT.water * 0.5);
}
