/*
   Author: Themaister
   License: Public domain
*/

// Border shader. 4x input scale, 1920x1080 border. :)

struct input
{
   float2 video_size;
   float2 texture_size;
   float2 output_size;
   float frame_count;
};

struct VERT
{
   float2 menu_pos;
   float2 menu_pos_alt;
   float alpha0;
   float alpha0_alt;
   float alpha1;
   float alpha1_alt;
   float alpha2;
   float alpha2_alt;
   float alpha3;
   float alpha3_alt;
   float alpha4;
   float alpha4_alt;
   float alpha5;
   float alpha5_alt;
};

#define MENU_PAGE_RES float2(569, 1016.0)
#define PAGE_GEOM float2(4.0, 2.0)

const float box_scale_ = 4.0; // 4x scale.
const float2 out_res_ = float2(1920.0, 1080.0); // Output target size.

// Output resolution on screen for the menu pages. The .jpg/.png can be whatever size.
const float2 menu_page_res_ = MENU_PAGE_RES;

const float2 page_geom = PAGE_GEOM;

const float2 menu_res_ = PAGE_GEOM * MENU_PAGE_RES;

// Depends on border. :)
const float2 shift_ = float2(-270.0, -54.0);
const float2 page_shift_ = float2(588.0, 10.0);

const float pages = 48.0; // Tweakable.

float2 pixel_shift(float2 middle, float2 show_size)
{
   return float2(-2.0, 2.0) * middle / show_size;
}

void main_vertex
(
   float4 position : POSITION,
   out float4 oPosition : POSITION,
   uniform float4x4 modelViewProj,

   float4 color : COLOR,
   out float4 oColor : COLOR,

   float2 tex : TEXCOORD,
   out float2 oTex : TEXCOORD,

   float2 tex_border : TEXCOORD1,
   out float2 otex_border : TEXCOORD1,

   out VERT vout,

   uniform float press_count_l,
   uniform float press_time_l,
   uniform float press_time_prev_l,
   uniform float press_count_r,
   uniform float press_time_r,
   uniform float press_time_prev_r,

   uniform input IN
)
{
   const float2 out_res = IN.output_size;
   const float2 scaling_coeff = out_res / out_res_;
   const float2 box_scale = box_scale_ * scaling_coeff;
   const float2 menu_page_res = menu_page_res_ * scaling_coeff;
   const float2 menu_res = menu_res_ * scaling_coeff;
   const float2 shift = shift_ * scaling_coeff;
   const float2 page_shift = page_shift_ * scaling_coeff;

   oPosition = mul(modelViewProj, position);
   oColor = color;
   
   float2 scale = (IN.output_size / IN.video_size) / box_scale;
   float2 middle = 0.5 * IN.video_size / IN.texture_size;
   float2 diff = tex.xy - middle;
   oTex = middle + (diff * scale + shift * pixel_shift(middle, IN.video_size * box_scale)) * IN.video_size / float2(256.0, 224.0);
   middle = float2(0.5, 0.5);
   float2 dist = tex_border - middle;
   otex_border = middle + dist * IN.output_size / out_res;

   // Calculate blend time.
   float time; 

   if (press_time_l > press_time_r)
   {
      if (floor(fmod(press_count_l, 2.0)) > 0.0)
         time = (IN.frame_count - press_time_l) / 20.0;
      else
         time = (IN.frame_count - press_time_prev_l) / 20.0;
   }
   else
   {
      if (floor(fmod(press_count_r, 2.0)) > 0.0)
         time = (IN.frame_count - press_time_r) / 20.0;
      else
         time = (IN.frame_count - press_time_prev_r) / 20.0;
   }

   float alpha_0 = 0.0;
   float alpha_0_alt = 0.0;
   float alpha_1 = 0.0;
   float alpha_1_alt = 0.0;
   float alpha_2 = 0.0;
   float alpha_2_alt = 0.0;
   float alpha_3 = 0.0;
   float alpha_3_alt = 0.0;
   float alpha_4 = 0.0;
   float alpha_4_alt = 0.0;
   float alpha_5 = 0.0;
   float alpha_5_alt = 0.0;

   // Calculate blend coeffs.
   float page_index = floor(fmod((press_count_r + 1.0) / 2.0, pages)) - floor(fmod((press_count_l + 1.0) / 2.0, pages));
   if (page_index < 0.0)
      page_index = pages + page_index;

   float page_index_prev;

   if (press_time_l > press_time_r)
   {
      page_index_prev = fmod(page_index + 1.0, pages);
   }
   else
   {
      if (page_index == 0.0)
         page_index_prev = pages - 1.0;
      else
         page_index_prev = page_index - 1.0;
   }

   float abs_page_index = floor(page_index / 8.0);
   float abs_page_index_prev = floor(page_index_prev / 8.0);

   float full_alpha = 1.0 - exp(-time);
   float prev_alpha = exp(-time);

   if (abs_page_index >= 5.0)
      alpha_5 = full_alpha;
   else if (abs_page_index >= 4.0)
      alpha_4 = full_alpha;
   else if (abs_page_index >= 3.0)
      alpha_3 = full_alpha;
   else if (abs_page_index >= 2.0)
      alpha_2 = full_alpha;
   else if (abs_page_index >= 1.0)
      alpha_1 = full_alpha;
   else
      alpha_0 = full_alpha;

   if (abs_page_index_prev >= 5.0)
      alpha_5_alt = prev_alpha;
   else if (abs_page_index_prev >= 4.0)
      alpha_4_alt = prev_alpha;
   else if (abs_page_index_prev >= 3.0)
      alpha_3_alt = prev_alpha;
   else if (abs_page_index_prev >= 2.0)
      alpha_2_alt = prev_alpha;
   else if (abs_page_index_prev >= 1.0)
      alpha_1_alt = prev_alpha;
   else
      alpha_0_alt = prev_alpha;


   float2 abs_shift = float2(0.5, -0.5) * (page_geom - float2(1.0));
   abs_shift += float2(-fmod(page_index, page_geom.x), floor(fmod(page_index, page_geom.x * page_geom.y) / page_geom.x));
   abs_shift *= menu_page_res;

   float2 abs_shift_alt = float2(0.5, -0.5) * (page_geom - float2(1.0));
   abs_shift_alt += float2(-fmod(page_index_prev, page_geom.x), floor(fmod(page_index_prev, page_geom.x * page_geom.y) / page_geom.x));
   abs_shift_alt *= menu_page_res;

   float2 menu_pos = 
      middle + 
      dist * IN.output_size / menu_res + 
      (page_shift + abs_shift) * pixel_shift(middle, menu_res);

   float2 menu_pos_alt = 
      middle + 
      dist * IN.output_size / menu_res + 
      (page_shift + abs_shift_alt) * pixel_shift(middle, menu_res);

   vout = VERT(menu_pos, menu_pos_alt, 
      alpha_0, alpha_0_alt,
      alpha_1, alpha_1_alt,
      alpha_2, alpha_2_alt,
      alpha_3, alpha_3_alt,
      alpha_4, alpha_4_alt,
      alpha_5, alpha_5_alt
   );
}

float4 main_fragment (
   float2 tex : TEXCOORD0, float2 tex_border : TEXCOORD1,
   uniform sampler2D s0 : TEXUNIT0,

   uniform sampler2D border,
   uniform sampler2D page1,
   uniform sampler2D page2,
   uniform sampler2D page3,
   uniform sampler2D page4,
   uniform sampler2D page5,
   uniform sampler2D page6,
   in VERT vout) : COLOR
{
   float4 frame = tex2D(s0, tex);
   float4 background = tex2D(border, tex_border);

   float alpha_mask = 1.0;
   if (tex_border.x >= 0.999 || tex_border.x < 0.65 || tex_border.y >= 0.999 || tex_border.y <= 0.001)
      alpha_mask = 0.0;

   return 
         alpha_mask * 
         (
            tex2D(page1, vout.menu_pos) * vout.alpha0 +
            tex2D(page1, vout.menu_pos_alt) * vout.alpha0_alt +
            tex2D(page2, vout.menu_pos) * vout.alpha1 +
            tex2D(page2, vout.menu_pos_alt) * vout.alpha1_alt +
            tex2D(page3, vout.menu_pos) * vout.alpha2 +
            tex2D(page3, vout.menu_pos_alt) * vout.alpha2_alt +
            tex2D(page4, vout.menu_pos) * vout.alpha3 +
            tex2D(page4, vout.menu_pos_alt) * vout.alpha3_alt +
            tex2D(page5, vout.menu_pos) * vout.alpha4 +
            tex2D(page5, vout.menu_pos_alt) * vout.alpha4_alt +
            tex2D(page6, vout.menu_pos) * vout.alpha5 +
            tex2D(page6, vout.menu_pos_alt) * vout.alpha5_alt
         ) 

         + lerp(frame, background, background.a);
}


