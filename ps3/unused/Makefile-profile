# set build tools
CELL_BUILD_TOOLS 	= GCC

ifeq ($(shell uname), Linux)
	CELL_HOST_PATH	= $(CELL_SDK)/host-linux
else
	CELL_HOST_PATH	= $(CELL_SDK)/host-win32
endif


# CELL_GPU_TYPE (currently RSX is only one option)
CELL_GPU_TYPE       	= RSX

# CELL_PSGL_VERSION is debug, dpm or opt
CELL_PSGL_VERSION   	= opt


# set path to important executables
MKFSELF_NPDRM 		= $(CELL_HOST_PATH)/bin/make_fself_npdrm
MKFSELF 		= $(CELL_HOST_PATH)/bin/make_fself
MKPKG_NPDRM 		= $(CELL_HOST_PATH)/bin/make_package_npdrm
STRIP 			= $(CELL_HOST_PATH)/ppu/bin/ppu-lv2-strip
COPY 			= cp
C 			= $(CELL_HOST_PATH)/ppu/bin/ppu-lv2-gcc
CC 			= $(CELL_HOST_PATH)/ppu/bin/ppu-lv2-g++

# set path to all relevants directories
SRC_DIR			= src
CELL_FRAMEWORK_DIR	= src/cellframework
CELL_FRAMEWORK2_DIR	= src/cellframework2
SNES9X_API_DIR		= src/snes9x
UTIL_DIR		= utils
BUILD_DIR		= objs


# build list of source directories
SNES9X_SRC_DIR		:= $(SNES9X_API_DIR)/ $(SNES9X_API_DIR)/unzip $(SNES9X_API_DIR)/apu $(SNES9X_API_DIR)/jma
				
PS3_SRC_DIR		:= $(CELL_FRAMEWORK_DIR)/graphics $(CELL_FRAMEWORK2_DIR)/input $(CELL_FRAMEWORK2_DIR)/audio \
			$(CELL_FRAMEWORK_DIR)/threads $(CELL_FRAMEWORK_DIR)/logger $(CELL_FRAMEWORK_DIR)/network \
			$(CELL_FRAMEWORK_DIR)/fileio \
			$(CELL_FRAMEWORK_DIR)/utility \
			$(SRC_DIR)/ $(SRC_DIR)/conf
				
UTIL_SRC_DIR		:= $(UTIL_DIR)/ $(UTIL_DIR)/zlib  $(UTIL_DIR)/zlib/contrib/minizip
				
# build src lists and object file lists
SNES9X_CPPSRCS		= $(SNES9X_API_DIR)/cpu.cpp \
			$(SNES9X_API_DIR)/cpuexec.cpp \
			$(SNES9X_API_DIR)/cpuops.cpp \
			$(SNES9X_API_DIR)/srtc.cpp \
			$(SNES9X_API_DIR)/dma.cpp \
			$(SNES9X_API_DIR)/memmap.cpp \
			$(SNES9X_API_DIR)/sa1.cpp \
			$(SNES9X_API_DIR)/sa1cpu.cpp \
			$(SNES9X_API_DIR)/apu/apu.cpp \
			$(SNES9X_API_DIR)/apu/SNES_SPC.cpp \
			$(SNES9X_API_DIR)/apu/SNES_SPC_misc.cpp \
			$(SNES9X_API_DIR)/apu/SNES_SPC_state.cpp \
			$(SNES9X_API_DIR)/apu/SPC_DSP.cpp \
			$(SNES9X_API_DIR)/apu/SPC_Filter.cpp \
			$(SNES9X_API_DIR)/fxdbg.cpp \
			$(SNES9X_API_DIR)/fxemu.cpp \
			$(SNES9X_API_DIR)/fxinst.cpp \
			$(SNES9X_API_DIR)/gfx.cpp \
			$(SNES9X_API_DIR)/ppu.cpp \
			$(foreach dir,$(SNES9X_API_DIR)/jma/,$(wildcard $(dir)/*.cpp)) \
			$(SNES9X_API_DIR)/bsx.cpp \
			$(SNES9X_API_DIR)/c4.cpp \
			$(SNES9X_API_DIR)/c4emu.cpp \
			$(SNES9X_API_DIR)/cheats.cpp \
			$(SNES9X_API_DIR)/cheats2.cpp \
			$(SNES9X_API_DIR)/clip.cpp \
			$(SNES9X_API_DIR)/conffile.cpp \
			$(SNES9X_API_DIR)/controls.cpp \
			$(SNES9X_API_DIR)/crosshairs.cpp \
			$(SNES9X_API_DIR)/debug.cpp \
			$(SNES9X_API_DIR)/dsp.cpp \
			$(SNES9X_API_DIR)/dsp1.cpp \
			$(SNES9X_API_DIR)/dsp2.cpp \
			$(SNES9X_API_DIR)/dsp3.cpp \
			$(SNES9X_API_DIR)/dsp4.cpp \
			$(SNES9X_API_DIR)/globals.cpp \
			$(SNES9X_API_DIR)/loadzip.cpp \
			$(SNES9X_API_DIR)/logger.cpp \
			$(SNES9X_API_DIR)/movie.cpp \
			$(SNES9X_API_DIR)/netplay.cpp \
			$(SNES9X_API_DIR)/obc1.cpp \
			$(SNES9X_API_DIR)/reader.cpp \
			$(SNES9X_API_DIR)/screenshot.cpp \
			$(SNES9X_API_DIR)/sdd1.cpp \
			$(SNES9X_API_DIR)/sdd1emu.cpp \
			$(SNES9X_API_DIR)/server.cpp \
			$(SNES9X_API_DIR)/seta.cpp \
			$(SNES9X_API_DIR)/seta010.cpp \
			$(SNES9X_API_DIR)/seta011.cpp \
			$(SNES9X_API_DIR)/seta018.cpp \
			$(SNES9X_API_DIR)/snapshot.cpp \
			$(SNES9X_API_DIR)/snes9x.cpp \
			$(SNES9X_API_DIR)/spc7110.cpp \
			$(SNES9X_API_DIR)/tile.cpp
#SNES9X_CPPSRCS		= $(foreach dir,$(SNES9X_SRC_DIR),$(wildcard $(dir)/*.cpp))
SNES9X_CPPOBJS		= $(SNES9X_CPPSRCS:.cpp=.ppu.o)
SNES9X_CSRCS		= $(foreach dir,$(SNES9X_SRC_DIR),$(wildcard $(dir)/*.c))
SNES9X_COBJS 		= $(SNES9X_CSRCS:.c=.ppu.o)

PS3_CPPSRCS		= $(foreach dir,$(PS3_SRC_DIR),$(wildcard $(dir)/*.cpp))
PS3_CPPOBJS 		= $(PS3_CPPSRCS:.cpp=.ppu.o) 
PS3_CSRCS		= $(foreach dir,$(PS3_SRC_DIR),$(wildcard $(dir)/*.c))
PS3_COBJS 		= $(PS3_CSRCS:.c=.ppu.o)

UTIL_CPPSRCS		= $(foreach dir,$(UTIL_SRC_DIR),$(wildcard $(dir)/*.cpp))
UTIL_CPPOBJS 		= $(UTIL_CPPSRCS:.cpp=.ppu.o) 
#UTIL_CSRCS		= $(foreach dir,$(UTIL_SRC_DIR),$(wildcard $(dir)/*.c))
UTIL_CSRCS		+= $(UTIL_DIR)/zlib/adler32.c \
			$(UTIL_DIR)/zlib/compress.c \
			$(UTIL_DIR)/zlib/crc32.c \
			$(UTIL_DIR)/zlib/deflate.c \
			$(UTIL_DIR)/zlib/gzclose.c \
			$(UTIL_DIR)/zlib/gzlib.c \
			$(UTIL_DIR)/zlib/gzread.c \
			$(UTIL_DIR)/zlib/gzwrite.c \
			$(UTIL_DIR)/zlib/infback.c \
			$(UTIL_DIR)/zlib/inffast.c \
			$(UTIL_DIR)/zlib/inflate.c \
			$(UTIL_DIR)/zlib/inftrees.c \
			$(UTIL_DIR)/zlib/trees.c \
			$(UTIL_DIR)/zlib/uncompr.c \
			$(UTIL_DIR)/zlib/zutil.c 
UTIL_COBJS 		= $(UTIL_CSRCS:.c=.ppu.o) 

PPU_CPPOBJS		= $(SNES9X_CPPOBJS:%=$(BUILD_DIR)/%) $(PS3_CPPOBJS:%=$(BUILD_DIR)/%) $(UTIL_CPPOBJS:%=$(BUILD_DIR)/%)
PPU_COBJS		= $(SNES9X_COBJS:%=$(BUILD_DIR)/%) $(PS3_COBJS:%=$(BUILD_DIR)/%) $(UTIL_COBJS:%=$(BUILD_DIR)/%)

# Output file
PPU_TARGET		= snes9x.ppu.elf


# default flags from sony
PPU_CXXFLAGS		= -std=c++98 -W -Wall -Wuninitialized -Wcomment -Wchar-subscripts \
			-Wdeprecated-declarations -Wendif-labels -Wformat=2 -Wformat-extra-args \
			-Wimplicit -Wimport -Winline -Wmissing-braces -Wparentheses -Wpointer-arith \
			-Wredundant-decls -Wreturn-type -Wshadow -Wsign-compare -Wswitch \
			-Wunknown-pragmas -Wunused -Wwrite-strings
PPU_CFLAGS		= -W -Wall -Wuninitialized -Wcomment -Wchar-subscripts \
			-Wdeprecated-declarations -Wendif-labels -Wformat=2 -Wformat-extra-args \
			-Wimplicit -Wimport -Winline -Wmissing-braces -Wparentheses -Wpointer-arith \
			-Wredundant-decls -Wreturn-type -Wshadow -Wsign-compare -Wswitch \
			-Wunknown-pragmas -Wunused -Wwrite-strings					

# PLATFORM
PPU_CXXFLAGS		+= -D__CELLOS_LV2__
PPU_CFLAGS		+= -D__CELLOS_LV2__


# include flags
PPU_CXXFLAGS		+= -I. -I$(SNES9X_API_DIR) -I./utils/ -I./utils/zlib
PPU_CFLAGS		+= -I. -I$(SNES9X_API_DIR) -I./utils/ -I./utils/zlib

# compiler optimizations
PPU_CXXFLAGS		+= -O3 \
			-ffast-math \
			-finline-functions \
			-funit-at-a-time \
			--param inline-unit-growth=200 \
			--param large-function-growth=1000 \
			--param max-inline-insns-single=450
					
PPU_CFLAGS		+= -O3 \
			-ffast-math \
			-finline-functions \
			-funit-at-a-time \
			--param inline-unit-growth=200 \
			--param large-function-growth=1000 \
			--param max-inline-insns-single=450
					
# port must define					
PPU_CXXFLAGS		+= -DPSGL -DCORRECT_VRAM_READS -DRIGHTSHIFT_IS_SAR -DUNZIP_SUPPORT -DJMA_SUPPORT -DZLIB
PPU_CFLAGS		+= -DPSGL -DCORRECT_VRAM_READS -DRIGHTSHIFT_IS_SAR -Dunix -DUSE_FILE32API -DUNZIP_SUPPORT -DJMA_SUPPORT

# DISABLE DEBUG, to enabled add -g
PPU_CXXFLAGS		+=	 
PPU_CFLAGS		+=	 


# enable debug netlogger
PPU_CXXFLAGS 		+= -DCELL_DEBUG -DPS3_DEBUG_IP=\"192.168.1.7\" -DPS3_DEBUG_PORT=9002
PPU_CFLAGS		+= -DCELL_DEBUG -DPS3_DEBUG_IP=\"192.168.1.7\" -DPS3_DEBUG_PORT=9002


# enable screen debugger
#PPU_CXXFLAGS		+=	-DEMUDEBUG -DEMU_DBG_DELAY=500000
#PPU_CFLAGS		+=	-DEMUDEBUG -DEMU_DBG_DELAY=500000


# enable telnet control console
#PPU_CSTDFLAGS		+=	-DCONTROL_CONSOLE -D__PPU__
#PPU_CSTDFLAGS		+=	-DCONSOLE_USE_NETWORK
#PPU_CXXSTDFLAGS	+=	-DCONTROL_CONSOLE -D__PPU__
#PPU_CXXSTDFLAGS	+=	-DCONSOLE_USE_NETWORK


# default SNES9x file libs
PPU_CXXSNES9XFLAGS 	= $(PPU_CXXFLAGS)
PPU_CSNES9XFLAGS 	= $(PPU_CFLAGS)


# libs, order matters!
PPU_LDLIBS		+= -L. -L$(CELL_SDK)/target/ppu/lib/PSGL/RSX/opt -ldbgfont -lPSGL -lPSGLcgc -lcgc \
			-lgcm_cmd -lgcm_sys_stub -lresc_stub -lm -lio_stub -lfs_stub -lsysutil_stub \
			-lcontrol_console_ppu -lsysmodule_stub -laudio_stub -lpthread -lnet_stub -lnetctl_stub 


# RULE: ALL
all: $(PPU_TARGET) $(PPU_TARGET:%.elf=%.self)


# RULE: All cpp files, can differentiate for SNES9x dir
$(BUILD_DIR)/%.ppu.o: %.cpp 
	@mkdir -p $(@D)
	$(if $(findstring $@,$(SNES9X_CPPOBJS:%=$(BUILD_DIR)/%)),\
		$(CC) $(PPU_CXXSNES9XFLAGS) -o $@ -c $<,\
		$(CC) $(PPU_CXXFLAGS) -o $@ -c $<)


# RULE: All c files, can differentiate for SNES9x dir		
$(BUILD_DIR)/%.ppu.o: %.c 
	@mkdir -p $(@D)
	$(if $(findstring $@,$(SNES9X_COBJS:%=$(BUILD_DIR)/%)),\
		ppu-lv2-gcc $(PPU_CSNES9XFLAGS) -o $@ -c $<,\
		ppu-lv2-gcc $(PPU_CFLAGS) -o $@ -c $<)		
	
	
# RULE: build the elf file	
$(PPU_TARGET): $(PPU_CPPOBJS) $(PPU_COBJS)
	$(CC) $(PPU_CXXFLAGS) $(PPU_LDLIBS) -o $(PPU_TARGET) $(PPU_CPPOBJS) $(PPU_COBJS)
	
	
# RULE: build the self file
$(PPU_TARGET:%.elf=%.self): $(PPU_TARGET)
	$(MKFSELF) $(PPU_TARGET) $(PPU_TARGET:%.elf=%.self)

	
# RULE: generates the compiler and linker flags for profile-arcs
genProfile: set_genProfile_flags all

set_genProfile_flags: $(BUILD_DIR)/$(CELL_FRAMEWORK_DIR)/network-stdio/net_stdio.ppu.o
	touch ./src/main.cpp		
	$(eval PS3_SRC_DIR		+= $(CELL_FRAMEWORK_DIR)/network-stdio)
	$(eval PPU_CXXFLAGS		+= -DPS3_PROFILING -DPS3_PROFILING_IP=\"192.168.1.7\" -DPS3_PROFILING_PORT=9001)
	$(eval PPU_CFLAGS 		+= -DPS3_PROFILING -DPS3_PROFILING_IP=\"192.168.1.7\" -DPS3_PROFILING_PORT=9001)
	$(eval PPU_CXXSNES9XFLAGS 	= $(PPU_CXXFLAGS) -fprofile-generate -fprofile-arcs)
	$(eval PPU_CSNES9XFLAGS		= $(PPU_CFLAGS) -fprofile-generate -fprofile-arcs)
	$(eval PPU_LDLIBS		+= -lgcov -fprofile-generate)
	$(eval PPU_LDLIBS		+= -Wl,-wrap,fopen -Wl,-wrap,fclose -Wl,-wrap,fwrite -Wl,-wrap,fread -Wl,-wrap,fseek -Wl,-wrap,ftell -Wl,-wrap,fflush -Wl,-wrap,rewind -Wl,-wrap,fgetpos -Wl,-wrap,fsetpos -Wl,-wrap,setbuf -Wl,-wrap,setvbuf -Wl,-wrap,ungetc -Wl,-wrap,feof)
	
	
# RULE: use a generated profile (gcda files)
useProfile: set_useProfile_flags all

set_useProfile_flags: 
	touch ./src/main.cpp
	$(eval PPU_CXXSNES9XFLAGS	= $(PPU_CXXFLAGS) -fprofile-use)
	$(eval PPU_CSNES9XFLAGS		= $(PPU_CFLAGS) -fprofile-use)
	$(eval PPU_LDLIBS		+= -fprofile-use)
	

# RULE: build the package
pkg: $(PPU_TARGET)
	$(STRIP) $(PPU_TARGET) 
	$(MKFSELF_NPDRM) $(PPU_TARGET) pkg/USRDIR/EBOOT.BIN
	$(COPY) -r ./src/cellframework/extra/shaders pkg/USRDIR/
	$(MKPKG_NPDRM) pkg/package.conf pkg


# RULE: testing...
echo:
	echo $(PPU_CPPOBJS)
	echo $(BUILD_DIR)/$(CELL_FRAMEWORK_DIR)/network-stdio/net_stdio.ppu.o
	
	
# RULE - force, for empty dependency
force: ;


# RULE - clean SNES9x or ps3 or utils or all	
clean_snes9x:
	@rm $(SNES9X_CPPOBJS:%=$(BUILD_DIR)/%) -f
	@rm $(SNES9X_CPPOBJS:%.o=$(BUILD_DIR)/%.d) -f
	@rm $(SNES9X_COBJS:%=$(BUILD_DIR)/%) -f
	@rm $(SNES9X_COBJS:%.o=$(BUILD_DIR)/%.d) -f
	
clean_ps3:
	@rm $(PS3_CPPOBJS:%=$(BUILD_DIR)/%) -f
	@rm $(PS3_CPPOBJS:%.o=$(BUILD_DIR)/%.d) -f
	@rm $(PS3_COBJS:%=$(BUILD_DIR)/%) -f
	@rm $(PS3_COBJS:%.o=$(BUILD_DIR)/%.d) -f
	@rm $(BUILD_DIR)/$(CELL_FRAMEWORK_DIR)/network-stdio/net_stdio.ppu.o -f
	
clean_util:
	@rm $(UTIL_CPPOBJS:%=$(BUILD_DIR)/%) -f
	@rm $(UTIL_CPPOBJS:%.o=$(BUILD_DIR)/%.d) -f
	@rm $(UTIL_COBJS:%=$(BUILD_DIR)/%) -f
	@rm $(UTIL_COBJS:%.o=$(BUILD_DIR)/%.d) -f

clean: clean_snes9x clean_ps3 clean_util
	@rm $(PPU_TARGET) $(PPU_TARGET:%.elf=%.self) -f

.PHONY: pkg
pkg: $(PPU_TARGET) 
	$(STRIP) $(PPU_TARGET)
	$(MKFSELF_NPDRM) $(PPU_TARGET) pkg/USRDIR/EBOOT.BIN
	$(COPY) -r src/cellframework/extra/shaders pkg/USRDIR/
	$(MKPKG_NPDRM) pkg/package.conf pkg
